<snippet>
  <content><![CDATA[
template <typename T>
class dinic {
public:
  flow_graph<T> &g;

  vector<int> ptr;
  vector<int> d;
  vector<int> q;

  dinic(flow_graph<T> &_g) : g(_g) {
    ptr.resize(g.n);
    d.resize(g.n);
    q.resize(g.n);
  }

  bool expath() {
      fill(d.begin(), d.end(), -1);
      q[0] = g.st;
      d[g.st] = 0;
      int beg = 0, end = 1;
      while (beg < end) {
        int u = q[beg++];
        for (int id : g.g[u]) {
          const auto &e = g.edges[id];
          if (e.c - e.f > g.eps && d[e.to] == -1) {
            d[e.to] = d[u] + 1;
            q[end++] = e.to;  
          }
        }
      }
      return d[g.fin] != -1;
    }


  T dfs(int v, T pushed) {
    if (pushed == 0) {
      return 0;
    }
    if (v == g.fin) {
      return pushed;
    }
    for (int& j = ptr[v]; j < (int) g.g[v].size(); j++) {
      int id = g.g[v][j];
      const auto &e = g.edges[id];
      if (d[v] == d[e.to] - 1 && e.c - e.f > g.eps) {
        T tr = dfs(e.to, min(pushed, e.c - e.f));
        if (tr > g.eps) {
          g.edges[id].f += tr;
          g.edges[id ^ 1].f -= tr;
          return tr;
        }
      }
    }
    return 0;
  }

  T max_flow() {
    T flow = 0;
    while (true) {
      if (!expath()) {
        break;
      }
      fill(ptr.begin(), ptr.end(), 0);
      while (T pushed = dfs(g.st, numeric_limits<T>::max())) {
        flow += pushed;
      }
    }
    return flow;
  }

  vector<bool> min_cut() {
    max_flow();
    vector<bool> ret(g.n);
    for (int i = 0; i < g.n; i++) {
      ret[i] = (d[i] != -1);
    }
    return ret;
  }
};

]]></content>
  <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
  <tabTrigger>dinic</tabTrigger>
  <!-- Optional: Set a scope to limit where the snippet will trigger -->
  <scope>source.c++</scope>
  <description>dinic forward</description>
</snippet>
